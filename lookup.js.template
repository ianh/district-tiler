function lookupDistrict(lng, lat, callback) {
    function encodeCoordinate(axis, c) {
        d = axis ? 180 : 360;
        return ((c / d + 0.5) * ((1<<30) - 1)) | 0;
    }
    function readCoordinate(buffer, i, last) {
        if ((buffer[i] & 0xc0) === 0x80) {
            // Absolute coordinate.
            return ((buffer[i] & 0x3f) << 24) + (buffer[i + 1] << 16) + (buffer[i + 2] << 8) + buffer[i + 3];
        } else if ((buffer[i] & 0x80) === 0x00) {
            // Relative coordinate.
            d = (buffer[i] << 8) + buffer[i + 1];
            if (d & 0x4000)
                d = -((~d + 1) & 0x7fff);
            return last + d;
        } else {
            throw "Invalid byte in tile data.";
        }
    }
    function orientation(x0, y0, x1, y1, px, py) {
        return (x1 - x0) * (py - y0) - (px - x0) * (y1 - y0);
    }
    var px = encodeCoordinate(0, lng);
    var py = encodeCoordinate(1, lat);
    var index = 0;
    var tilenum = 0;
    while (index < tree.length) {
        tilenum *= 2;
        var cutoff = tree[index];
        var axis = 0;
        if (cutoff & 0x40000000) {
            axis = 1;
            cutoff &= 0x3fffffff;
        }
        var lower = false;
        if (axis === 0)
            lower = (px < cutoff);
        else
            lower = (py < cutoff);
        if (lower) {
            index = 2 * index + 1;
        } else {
            tilenum += 1;
            index = 2 * index + 2;
        }
    }
    var request = new XMLHttpRequest();
    request.open("GET", "tiles/tile-" + ("0000" + tilenum).slice(-4), true);
    request.responseType = "arraybuffer";
    request.onreadystatechange = function () {
        if (request.readyState !== 4)
            return;
        if (request.status !== 200 && window.location.protocol !== "file:") {
            callback("failed");
            return;
        }
        var buffer = new Uint8Array(request.response);
        var state = -1;
        var district = -1;
        var lastx = -1;
        var lasty = -1;
        var winding = 0;
        for (var i = 0; i + 2 <= buffer.length; i += 2) {
            if (buffer[i] === 0xff) {
                if (buffer[i + 1] === 0xff) {
                    // New part in this district.
                } else {
                    // Entirely new district.
                    if (winding > 0)
                        break;
                    winding = 0;
                    state = buffer[i + 2];
                    district = buffer[i + 3];
                    i += 2;
                }
                lastx = -1;
                lasty = -1;
                continue;
            }
            var x = readCoordinate(buffer, i, lastx);
            if ((buffer[i] & 0xc0) === 0x80)
                i += 2;
            i += 2;
            var y = readCoordinate(buffer, i, lasty);
            if ((buffer[i] & 0xc0) === 0x80)
                i += 2;

            if (lastx != -1 && lasty != -1) {
                // Check if this edge crossed the query point vertically.  We count these crossings to determine whether the query point is inside the current district.
                if (lasty <= py) {
                    if (y > py) {
                        if (orientation(lastx, lasty, x, y, px, py) > 0)
                            winding--;
                    }
                } else {
                    if (y <= py) {
                        if (orientation(lastx, lasty, x, y, px, py) < 0)
                            winding++;
                    }
                }
            }
            lastx = x;
            lasty = y;
        }
        if (winding > 0)
            callback("found", state, district);
        else
            callback("notfound");
    };
    request.timeout = 10000;
    request.send();
}
